/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  GetDataEnumKind,
  GetDataEnumKindContent,
  PublicKey,
  Serializer,
} from '@metaplex-foundation/umi';

export type EscrowConstraintType =
  | { __kind: 'None' }
  | { __kind: 'Collection'; fields: [PublicKey] }
  | { __kind: 'Tokens'; fields: [Set<PublicKey>] }
  | { __kind: 'FirstCreator'; fields: [PublicKey] };

export type EscrowConstraintTypeArgs = EscrowConstraintType;

export function getEscrowConstraintTypeSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<EscrowConstraintTypeArgs, EscrowConstraintType> {
  const s = context.serializer;
  return s.dataEnum<EscrowConstraintType>(
    [
      ['None', s.unit()],
      [
        'Collection',
        s.struct<GetDataEnumKindContent<EscrowConstraintType, 'Collection'>>(
          [['fields', s.tuple([s.publicKey()])]],
          { description: 'Collection' }
        ),
      ],
      [
        'Tokens',
        s.struct<GetDataEnumKindContent<EscrowConstraintType, 'Tokens'>>(
          [['fields', s.tuple([s.set(s.publicKey())])]],
          { description: 'Tokens' }
        ),
      ],
      [
        'FirstCreator',
        s.struct<GetDataEnumKindContent<EscrowConstraintType, 'FirstCreator'>>(
          [['fields', s.tuple([s.publicKey()])]],
          { description: 'FirstCreator' }
        ),
      ],
    ],
    { description: 'EscrowConstraintType' }
  ) as Serializer<EscrowConstraintTypeArgs, EscrowConstraintType>;
}

// Data Enum Helpers.
export function escrowConstraintType(
  kind: 'None'
): GetDataEnumKind<EscrowConstraintTypeArgs, 'None'>;
export function escrowConstraintType(
  kind: 'Collection',
  data: GetDataEnumKindContent<EscrowConstraintTypeArgs, 'Collection'>['fields']
): GetDataEnumKind<EscrowConstraintTypeArgs, 'Collection'>;
export function escrowConstraintType(
  kind: 'Tokens',
  data: GetDataEnumKindContent<EscrowConstraintTypeArgs, 'Tokens'>['fields']
): GetDataEnumKind<EscrowConstraintTypeArgs, 'Tokens'>;
export function escrowConstraintType(
  kind: 'FirstCreator',
  data: GetDataEnumKindContent<
    EscrowConstraintTypeArgs,
    'FirstCreator'
  >['fields']
): GetDataEnumKind<EscrowConstraintTypeArgs, 'FirstCreator'>;
export function escrowConstraintType<
  K extends EscrowConstraintTypeArgs['__kind']
>(kind: K, data?: any): Extract<EscrowConstraintTypeArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isEscrowConstraintType<
  K extends EscrowConstraintType['__kind']
>(
  kind: K,
  value: EscrowConstraintType
): value is EscrowConstraintType & { __kind: K } {
  return value.__kind === kind;
}
