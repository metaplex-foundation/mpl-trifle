/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Option,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
} from '@metaplex-foundation/umi';
import {
  EscrowConstraint,
  EscrowConstraintArgs,
  Key,
  KeyArgs,
  RoyaltyInstruction,
  RoyaltyInstructionArgs,
  getEscrowConstraintSerializer,
  getKeySerializer,
  getRoyaltyInstructionSerializer,
} from '../types';

export type EscrowConstraintModel = Account<EscrowConstraintModelAccountData>;

export type EscrowConstraintModelAccountData = {
  key: Key;
  creator: PublicKey;
  name: string;
  constraints: Map<string, EscrowConstraint>;
  updateAuthority: PublicKey;
  count: bigint;
  schemaUri: Option<string>;
  royalties: Map<RoyaltyInstruction, bigint>;
  royaltyBalance: bigint;
  padding: Uint8Array;
};

export type EscrowConstraintModelAccountDataArgs = {
  key: KeyArgs;
  creator: PublicKey;
  name: string;
  constraints: Map<string, EscrowConstraintArgs>;
  updateAuthority: PublicKey;
  count: number | bigint;
  schemaUri: Option<string>;
  royalties: Map<RoyaltyInstructionArgs, number | bigint>;
  royaltyBalance: number | bigint;
  padding: Uint8Array;
};

export function getEscrowConstraintModelAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  EscrowConstraintModelAccountDataArgs,
  EscrowConstraintModelAccountData
> {
  const s = context.serializer;
  return s.struct<EscrowConstraintModelAccountData>(
    [
      ['key', getKeySerializer(context)],
      ['creator', s.publicKey()],
      ['name', s.string()],
      [
        'constraints',
        s.map(s.string(), getEscrowConstraintSerializer(context)),
      ],
      ['updateAuthority', s.publicKey()],
      ['count', s.u64()],
      ['schemaUri', s.option(s.string())],
      ['royalties', s.map(getRoyaltyInstructionSerializer(context), s.u64())],
      ['royaltyBalance', s.u64()],
      ['padding', s.bytes()],
    ],
    { description: 'EscrowConstraintModel' }
  ) as Serializer<
    EscrowConstraintModelAccountDataArgs,
    EscrowConstraintModelAccountData
  >;
}

export function deserializeEscrowConstraintModel(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): EscrowConstraintModel {
  return deserializeAccount(
    rawAccount,
    getEscrowConstraintModelAccountDataSerializer(context)
  );
}

export async function fetchEscrowConstraintModel(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<EscrowConstraintModel> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  assertAccountExists(maybeAccount, 'EscrowConstraintModel');
  return deserializeEscrowConstraintModel(context, maybeAccount);
}

export async function safeFetchEscrowConstraintModel(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<EscrowConstraintModel | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  return maybeAccount.exists
    ? deserializeEscrowConstraintModel(context, maybeAccount)
    : null;
}

export async function fetchAllEscrowConstraintModel(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<EscrowConstraintModel[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'EscrowConstraintModel');
    return deserializeEscrowConstraintModel(context, maybeAccount);
  });
}

export async function safeFetchAllEscrowConstraintModel(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<EscrowConstraintModel[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeEscrowConstraintModel(context, maybeAccount as RpcAccount)
    );
}

export function getEscrowConstraintModelGpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>
) {
  const s = context.serializer;
  const programId = context.programs.getPublicKey(
    'mplTrifle',
    'trifMWutwBxkSuatmpPVnEe7NoE3BJKgjVi8sSyoXWX'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: KeyArgs;
      creator: PublicKey;
      name: string;
      constraints: Map<string, EscrowConstraintArgs>;
      updateAuthority: PublicKey;
      count: number | bigint;
      schemaUri: Option<string>;
      royalties: Map<RoyaltyInstructionArgs, number | bigint>;
      royaltyBalance: number | bigint;
      padding: Uint8Array;
    }>({
      key: [0, getKeySerializer(context)],
      creator: [1, s.publicKey()],
      name: [33, s.string()],
      constraints: [
        null,
        s.map(s.string(), getEscrowConstraintSerializer(context)),
      ],
      updateAuthority: [null, s.publicKey()],
      count: [null, s.u64()],
      schemaUri: [null, s.option(s.string())],
      royalties: [
        null,
        s.map(getRoyaltyInstructionSerializer(context), s.u64()),
      ],
      royaltyBalance: [null, s.u64()],
      padding: [null, s.bytes()],
    })
    .deserializeUsing<EscrowConstraintModel>((account) =>
      deserializeEscrowConstraintModel(context, account)
    );
}
