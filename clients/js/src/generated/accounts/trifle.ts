/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
} from '@metaplex-foundation/umi';
import {
  Key,
  KeyArgs,
  TokenAmount,
  TokenAmountArgs,
  getKeySerializer,
  getTokenAmountSerializer,
} from '../types';

export type Trifle = Account<TrifleAccountData>;

export type TrifleAccountData = {
  key: Key;
  tokenEscrow: PublicKey;
  tokens: Map<string, Array<TokenAmount>>;
  escrowConstraintModel: PublicKey;
  padding: Uint8Array;
};

export type TrifleAccountDataArgs = {
  key: KeyArgs;
  tokenEscrow: PublicKey;
  tokens: Map<string, Array<TokenAmountArgs>>;
  escrowConstraintModel: PublicKey;
  padding: Uint8Array;
};

export function getTrifleAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<TrifleAccountDataArgs, TrifleAccountData> {
  const s = context.serializer;
  return s.struct<TrifleAccountData>(
    [
      ['key', getKeySerializer(context)],
      ['tokenEscrow', s.publicKey()],
      ['tokens', s.map(s.string(), s.array(getTokenAmountSerializer(context)))],
      ['escrowConstraintModel', s.publicKey()],
      ['padding', s.bytes()],
    ],
    { description: 'Trifle' }
  ) as Serializer<TrifleAccountDataArgs, TrifleAccountData>;
}

export function deserializeTrifle(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): Trifle {
  return deserializeAccount(
    rawAccount,
    getTrifleAccountDataSerializer(context)
  );
}

export async function fetchTrifle(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<Trifle> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  assertAccountExists(maybeAccount, 'Trifle');
  return deserializeTrifle(context, maybeAccount);
}

export async function safeFetchTrifle(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<Trifle | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  return maybeAccount.exists ? deserializeTrifle(context, maybeAccount) : null;
}

export async function fetchAllTrifle(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<Trifle[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Trifle');
    return deserializeTrifle(context, maybeAccount);
  });
}

export async function safeFetchAllTrifle(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<Trifle[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeTrifle(context, maybeAccount as RpcAccount)
    );
}

export function getTrifleGpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>
) {
  const s = context.serializer;
  const programId = context.programs.getPublicKey(
    'mplTrifle',
    'trifMWutwBxkSuatmpPVnEe7NoE3BJKgjVi8sSyoXWX'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: KeyArgs;
      tokenEscrow: PublicKey;
      tokens: Map<string, Array<TokenAmountArgs>>;
      escrowConstraintModel: PublicKey;
      padding: Uint8Array;
    }>({
      key: [0, getKeySerializer(context)],
      tokenEscrow: [1, s.publicKey()],
      tokens: [
        33,
        s.map(s.string(), s.array(getTokenAmountSerializer(context))),
      ],
      escrowConstraintModel: [null, s.publicKey()],
      padding: [null, s.bytes()],
    })
    .deserializeUsing<Trifle>((account) => deserializeTrifle(context, account));
}
