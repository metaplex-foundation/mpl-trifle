/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  checkForIsWritableOverride as isWritable,
  mapSerializer,
  transactionBuilder,
} from '@metaplex-foundation/umi';

// Accounts.
export type TransferInInstructionAccounts = {
  /** The trifle account to use */
  trifle: PublicKey;
  /** Trifle Authority - the account that can sign transactions for the trifle account */
  trifleAuthority: PublicKey;
  /** Wallet paying for the transaction */
  payer?: Signer;
  /** The escrow constraint model of the Trifle account */
  constraintModel: PublicKey;
  /** The escrow account of the Trifle account */
  escrow: PublicKey;
  /** The escrow account's base token mint */
  escrowMint?: PublicKey;
  /** The token account of the escrow account's base token */
  escrowToken?: PublicKey;
  /** The freeze authority of the escrow account's base token mint */
  escrowEdition?: PublicKey;
  /** The mint of the attribute token */
  attributeMint?: PublicKey;
  /** The token account that the attribute token is being transferred from */
  attributeSrcToken?: PublicKey;
  /** The token account that the attribute token is being transferred to (pda of the escrow account) */
  attributeDstToken?: PublicKey;
  /** The metadata account of the attribute token */
  attributeMetadata?: PublicKey;
  /** The edition account of the attribute token */
  attributeEdition?: PublicKey;
  /** The collection metadata account of the attribute token */
  attributeCollectionMetadata?: PublicKey;
  /** System program */
  systemProgram?: PublicKey;
  /** Token program */
  splToken: PublicKey;
  /** Associated token account program */
  splAssociatedTokenAccount: PublicKey;
  /** Token Metadata program */
  tokenMetadataProgram?: PublicKey;
};

// Arguments.
export type TransferInInstructionData = {
  discriminator: number;
  slot: string;
  amount: bigint;
};

export type TransferInInstructionDataArgs = {
  slot: string;
  amount: number | bigint;
};

export function getTransferInInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<TransferInInstructionDataArgs, TransferInInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    TransferInInstructionDataArgs,
    TransferInInstructionData,
    TransferInInstructionData
  >(
    s.struct<TransferInInstructionData>(
      [
        ['discriminator', s.u8()],
        ['slot', s.string()],
        ['amount', s.u64()],
      ],
      { description: 'TransferInInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 2 } as TransferInInstructionData)
  ) as Serializer<TransferInInstructionDataArgs, TransferInInstructionData>;
}

// Instruction.
export function transferIn(
  context: Pick<Context, 'serializer' | 'programs' | 'payer'>,
  input: TransferInInstructionAccounts & TransferInInstructionDataArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTrifle',
    'trifMWutwBxkSuatmpPVnEe7NoE3BJKgjVi8sSyoXWX'
  );

  // Resolved accounts.
  const trifleAccount = input.trifle;
  const trifleAuthorityAccount = input.trifleAuthority;
  const payerAccount = input.payer ?? context.payer;
  const constraintModelAccount = input.constraintModel;
  const escrowAccount = input.escrow;
  const escrowMintAccount = input.escrowMint ?? {
    ...programId,
    isWritable: false,
  };
  const escrowTokenAccount = input.escrowToken ?? {
    ...programId,
    isWritable: false,
  };
  const escrowEditionAccount = input.escrowEdition ?? {
    ...programId,
    isWritable: false,
  };
  const attributeMintAccount = input.attributeMint ?? {
    ...programId,
    isWritable: false,
  };
  const attributeSrcTokenAccount = input.attributeSrcToken ?? {
    ...programId,
    isWritable: false,
  };
  const attributeDstTokenAccount = input.attributeDstToken ?? {
    ...programId,
    isWritable: false,
  };
  const attributeMetadataAccount = input.attributeMetadata ?? {
    ...programId,
    isWritable: false,
  };
  const attributeEditionAccount = input.attributeEdition ?? {
    ...programId,
    isWritable: false,
  };
  const attributeCollectionMetadataAccount =
    input.attributeCollectionMetadata ?? { ...programId, isWritable: false };
  const systemProgramAccount = input.systemProgram ?? {
    ...context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    ),
    isWritable: false,
  };
  const splTokenAccount = input.splToken;
  const splAssociatedTokenAccountAccount = input.splAssociatedTokenAccount;
  const tokenMetadataProgramAccount = input.tokenMetadataProgram ?? {
    ...context.programs.getPublicKey(
      'mplTokenMetadata',
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
    ),
    isWritable: false,
  };

  // Trifle.
  keys.push({
    pubkey: trifleAccount,
    isSigner: false,
    isWritable: isWritable(trifleAccount, true),
  });

  // Trifle Authority.
  keys.push({
    pubkey: trifleAuthorityAccount,
    isSigner: false,
    isWritable: isWritable(trifleAuthorityAccount, true),
  });

  // Payer.
  signers.push(payerAccount);
  keys.push({
    pubkey: payerAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(payerAccount, true),
  });

  // Constraint Model.
  keys.push({
    pubkey: constraintModelAccount,
    isSigner: false,
    isWritable: isWritable(constraintModelAccount, true),
  });

  // Escrow.
  keys.push({
    pubkey: escrowAccount,
    isSigner: false,
    isWritable: isWritable(escrowAccount, false),
  });

  // Escrow Mint.
  keys.push({
    pubkey: escrowMintAccount,
    isSigner: false,
    isWritable: isWritable(escrowMintAccount, false),
  });

  // Escrow Token.
  keys.push({
    pubkey: escrowTokenAccount,
    isSigner: false,
    isWritable: isWritable(escrowTokenAccount, true),
  });

  // Escrow Edition.
  keys.push({
    pubkey: escrowEditionAccount,
    isSigner: false,
    isWritable: isWritable(escrowEditionAccount, true),
  });

  // Attribute Mint.
  keys.push({
    pubkey: attributeMintAccount,
    isSigner: false,
    isWritable: isWritable(attributeMintAccount, true),
  });

  // Attribute Src Token.
  keys.push({
    pubkey: attributeSrcTokenAccount,
    isSigner: false,
    isWritable: isWritable(attributeSrcTokenAccount, true),
  });

  // Attribute Dst Token.
  keys.push({
    pubkey: attributeDstTokenAccount,
    isSigner: false,
    isWritable: isWritable(attributeDstTokenAccount, true),
  });

  // Attribute Metadata.
  keys.push({
    pubkey: attributeMetadataAccount,
    isSigner: false,
    isWritable: isWritable(attributeMetadataAccount, true),
  });

  // Attribute Edition.
  keys.push({
    pubkey: attributeEditionAccount,
    isSigner: false,
    isWritable: isWritable(attributeEditionAccount, true),
  });

  // Attribute Collection Metadata.
  keys.push({
    pubkey: attributeCollectionMetadataAccount,
    isSigner: false,
    isWritable: isWritable(attributeCollectionMetadataAccount, true),
  });

  // System Program.
  keys.push({
    pubkey: systemProgramAccount,
    isSigner: false,
    isWritable: isWritable(systemProgramAccount, false),
  });

  // Spl Token.
  keys.push({
    pubkey: splTokenAccount,
    isSigner: false,
    isWritable: isWritable(splTokenAccount, false),
  });

  // Spl Associated Token Account.
  keys.push({
    pubkey: splAssociatedTokenAccountAccount,
    isSigner: false,
    isWritable: isWritable(splAssociatedTokenAccountAccount, false),
  });

  // Token Metadata Program.
  keys.push({
    pubkey: tokenMetadataProgramAccount,
    isSigner: false,
    isWritable: isWritable(tokenMetadataProgramAccount, false),
  });

  // Data.
  const data = getTransferInInstructionDataSerializer(context).serialize(input);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
