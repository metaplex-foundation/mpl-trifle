/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  checkForIsWritableOverride as isWritable,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';

// Accounts.
export type TransferOutInstructionAccounts = {
  /** The trifle account to use */
  trifleAccount: PublicKey;
  /** The constraint model to check against */
  constraintModel: PublicKey;
  /** The escrow account attached to the NFT */
  escrowAccount: PublicKey;
  /** The token account holding the NFT the escrow is attached to */
  escrowTokenAccount: PublicKey;
  /** The mint of the NFT the escrow is attached to */
  escrowMint: PublicKey;
  /** The metadata account for the escrow mint */
  escrowMetadata: PublicKey;
  /** The edition of the NFT the escrow is attached to */
  escrowEdition?: PublicKey;
  /** Wallet paying for the transaction */
  payer?: Signer;
  /** Trifle Authority - the account that can sign transactions for the trifle account */
  trifleAuthority: PublicKey;
  /** The mint of the attribute */
  attributeMint: PublicKey;
  /** The token account the attribute is being transferred from */
  attributeSrcTokenAccount: PublicKey;
  /** The token account the attribute is being transferred to */
  attributeDstTokenAccount: PublicKey;
  /** The metadata of the attribute */
  attributeMetadata: PublicKey;
  /** The system program */
  systemProgram?: PublicKey;
  /** The associated token account program */
  splAssociatedTokenAccount: PublicKey;
  /** The spl token program */
  splToken: PublicKey;
  /** The token metadata program */
  tokenMetadataProgram?: PublicKey;
  /** Instructions sysvar account */
  sysvarInstructions?: PublicKey;
};

// Arguments.
export type TransferOutInstructionData = {
  discriminator: number;
  slot: string;
  amount: bigint;
};

export type TransferOutInstructionDataArgs = {
  slot: string;
  amount: number | bigint;
};

export function getTransferOutInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<TransferOutInstructionDataArgs, TransferOutInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    TransferOutInstructionDataArgs,
    TransferOutInstructionData,
    TransferOutInstructionData
  >(
    s.struct<TransferOutInstructionData>(
      [
        ['discriminator', s.u8()],
        ['slot', s.string()],
        ['amount', s.u64()],
      ],
      { description: 'TransferOutInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 3 } as TransferOutInstructionData)
  ) as Serializer<TransferOutInstructionDataArgs, TransferOutInstructionData>;
}

// Instruction.
export function transferOut(
  context: Pick<Context, 'serializer' | 'programs' | 'payer'>,
  input: TransferOutInstructionAccounts & TransferOutInstructionDataArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTrifle',
    'trifMWutwBxkSuatmpPVnEe7NoE3BJKgjVi8sSyoXWX'
  );

  // Resolved accounts.
  const trifleAccountAccount = input.trifleAccount;
  const constraintModelAccount = input.constraintModel;
  const escrowAccountAccount = input.escrowAccount;
  const escrowTokenAccountAccount = input.escrowTokenAccount;
  const escrowMintAccount = input.escrowMint;
  const escrowMetadataAccount = input.escrowMetadata;
  const escrowEditionAccount = input.escrowEdition ?? {
    ...programId,
    isWritable: false,
  };
  const payerAccount = input.payer ?? context.payer;
  const trifleAuthorityAccount = input.trifleAuthority;
  const attributeMintAccount = input.attributeMint;
  const attributeSrcTokenAccountAccount = input.attributeSrcTokenAccount;
  const attributeDstTokenAccountAccount = input.attributeDstTokenAccount;
  const attributeMetadataAccount = input.attributeMetadata;
  const systemProgramAccount = input.systemProgram ?? {
    ...context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    ),
    isWritable: false,
  };
  const splAssociatedTokenAccountAccount = input.splAssociatedTokenAccount;
  const splTokenAccount = input.splToken;
  const tokenMetadataProgramAccount = input.tokenMetadataProgram ?? {
    ...context.programs.getPublicKey(
      'mplTokenMetadata',
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
    ),
    isWritable: false,
  };
  const sysvarInstructionsAccount =
    input.sysvarInstructions ??
    publicKey('Sysvar1nstructions1111111111111111111111111');

  // Trifle Account.
  keys.push({
    pubkey: trifleAccountAccount,
    isSigner: false,
    isWritable: isWritable(trifleAccountAccount, true),
  });

  // Constraint Model.
  keys.push({
    pubkey: constraintModelAccount,
    isSigner: false,
    isWritable: isWritable(constraintModelAccount, true),
  });

  // Escrow Account.
  keys.push({
    pubkey: escrowAccountAccount,
    isSigner: false,
    isWritable: isWritable(escrowAccountAccount, false),
  });

  // Escrow Token Account.
  keys.push({
    pubkey: escrowTokenAccountAccount,
    isSigner: false,
    isWritable: isWritable(escrowTokenAccountAccount, true),
  });

  // Escrow Mint.
  keys.push({
    pubkey: escrowMintAccount,
    isSigner: false,
    isWritable: isWritable(escrowMintAccount, true),
  });

  // Escrow Metadata.
  keys.push({
    pubkey: escrowMetadataAccount,
    isSigner: false,
    isWritable: isWritable(escrowMetadataAccount, true),
  });

  // Escrow Edition.
  keys.push({
    pubkey: escrowEditionAccount,
    isSigner: false,
    isWritable: isWritable(escrowEditionAccount, true),
  });

  // Payer.
  signers.push(payerAccount);
  keys.push({
    pubkey: payerAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(payerAccount, true),
  });

  // Trifle Authority.
  keys.push({
    pubkey: trifleAuthorityAccount,
    isSigner: false,
    isWritable: isWritable(trifleAuthorityAccount, false),
  });

  // Attribute Mint.
  keys.push({
    pubkey: attributeMintAccount,
    isSigner: false,
    isWritable: isWritable(attributeMintAccount, false),
  });

  // Attribute Src Token Account.
  keys.push({
    pubkey: attributeSrcTokenAccountAccount,
    isSigner: false,
    isWritable: isWritable(attributeSrcTokenAccountAccount, true),
  });

  // Attribute Dst Token Account.
  keys.push({
    pubkey: attributeDstTokenAccountAccount,
    isSigner: false,
    isWritable: isWritable(attributeDstTokenAccountAccount, true),
  });

  // Attribute Metadata.
  keys.push({
    pubkey: attributeMetadataAccount,
    isSigner: false,
    isWritable: isWritable(attributeMetadataAccount, false),
  });

  // System Program.
  keys.push({
    pubkey: systemProgramAccount,
    isSigner: false,
    isWritable: isWritable(systemProgramAccount, false),
  });

  // Spl Associated Token Account.
  keys.push({
    pubkey: splAssociatedTokenAccountAccount,
    isSigner: false,
    isWritable: isWritable(splAssociatedTokenAccountAccount, false),
  });

  // Spl Token.
  keys.push({
    pubkey: splTokenAccount,
    isSigner: false,
    isWritable: isWritable(splTokenAccount, false),
  });

  // Token Metadata Program.
  keys.push({
    pubkey: tokenMetadataProgramAccount,
    isSigner: false,
    isWritable: isWritable(tokenMetadataProgramAccount, false),
  });

  // Sysvar Instructions.
  keys.push({
    pubkey: sysvarInstructionsAccount,
    isSigner: false,
    isWritable: isWritable(sysvarInstructionsAccount, false),
  });

  // Data.
  const data =
    getTransferOutInstructionDataSerializer(context).serialize(input);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
