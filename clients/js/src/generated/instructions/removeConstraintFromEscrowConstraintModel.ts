/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  checkForIsWritableOverride as isWritable,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';

// Accounts.
export type RemoveConstraintFromEscrowConstraintModelInstructionAccounts = {
  /** Constraint model account */
  constraintModel: PublicKey;
  /** Wallet paying for the transaction */
  payer?: Signer;
  /** Update authority of the constraint model */
  updateAuthority: Signer;
  /** System program */
  systemProgram?: PublicKey;
  /** Instructions sysvar account */
  sysvarInstructions?: PublicKey;
};

// Arguments.
export type RemoveConstraintFromEscrowConstraintModelInstructionData = {
  discriminator: number;
  constraintName: string;
};

export type RemoveConstraintFromEscrowConstraintModelInstructionDataArgs = {
  constraintName: string;
};

export function getRemoveConstraintFromEscrowConstraintModelInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  RemoveConstraintFromEscrowConstraintModelInstructionDataArgs,
  RemoveConstraintFromEscrowConstraintModelInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    RemoveConstraintFromEscrowConstraintModelInstructionDataArgs,
    RemoveConstraintFromEscrowConstraintModelInstructionData,
    RemoveConstraintFromEscrowConstraintModelInstructionData
  >(
    s.struct<RemoveConstraintFromEscrowConstraintModelInstructionData>(
      [
        ['discriminator', s.u8()],
        ['constraintName', s.string()],
      ],
      {
        description: 'RemoveConstraintFromEscrowConstraintModelInstructionData',
      }
    ),
    (value) =>
      ({
        ...value,
        discriminator: 7,
      } as RemoveConstraintFromEscrowConstraintModelInstructionData)
  ) as Serializer<
    RemoveConstraintFromEscrowConstraintModelInstructionDataArgs,
    RemoveConstraintFromEscrowConstraintModelInstructionData
  >;
}

// Instruction.
export function removeConstraintFromEscrowConstraintModel(
  context: Pick<Context, 'serializer' | 'programs' | 'payer'>,
  input: RemoveConstraintFromEscrowConstraintModelInstructionAccounts &
    RemoveConstraintFromEscrowConstraintModelInstructionDataArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTrifle',
    'trifMWutwBxkSuatmpPVnEe7NoE3BJKgjVi8sSyoXWX'
  );

  // Resolved accounts.
  const constraintModelAccount = input.constraintModel;
  const payerAccount = input.payer ?? context.payer;
  const updateAuthorityAccount = input.updateAuthority;
  const systemProgramAccount = input.systemProgram ?? {
    ...context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    ),
    isWritable: false,
  };
  const sysvarInstructionsAccount =
    input.sysvarInstructions ??
    publicKey('Sysvar1nstructions1111111111111111111111111');

  // Constraint Model.
  keys.push({
    pubkey: constraintModelAccount,
    isSigner: false,
    isWritable: isWritable(constraintModelAccount, true),
  });

  // Payer.
  signers.push(payerAccount);
  keys.push({
    pubkey: payerAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(payerAccount, true),
  });

  // Update Authority.
  signers.push(updateAuthorityAccount);
  keys.push({
    pubkey: updateAuthorityAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(updateAuthorityAccount, false),
  });

  // System Program.
  keys.push({
    pubkey: systemProgramAccount,
    isSigner: false,
    isWritable: isWritable(systemProgramAccount, false),
  });

  // Sysvar Instructions.
  keys.push({
    pubkey: sysvarInstructionsAccount,
    isSigner: false,
    isWritable: isWritable(sysvarInstructionsAccount, false),
  });

  // Data.
  const data =
    getRemoveConstraintFromEscrowConstraintModelInstructionDataSerializer(
      context
    ).serialize(input);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
